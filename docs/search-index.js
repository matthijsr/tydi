var searchIndex = JSON.parse('{\
"tydi":{"doc":"Tydi is an open specification for complex data structures …","t":[13,13,13,8,4,13,8,13,13,13,13,13,3,3,6,3,13,3,6,6,13,6,8,8,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,6,17,6,6,3,6,3,6,6,3,6,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,0,11,11,11,11,0,11,0,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,8,8,8,11,10,11,10,11,11,11,0,0,11,11,11,11,0,11,0,0,10,8,11,11,10,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,8,4,13,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,13,13,11,11,13,11,13,13,11,13,13,13,13,13,11,11,13,13,13,11,11,11,11,11,11,13,13,13,13,11,13,11,11,11,10,13,13,13,13,13,13,13,11,11,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,0,0,10,0,4,8,13,3,3,8,4,8,8,8,13,8,13,13,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,13,3,3,13,4,13,3,3,3,3,3,13,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,17,13,8,13,4,13,13,13,13,13,13,8,8,8,13,8,13,8,6,8,13,13,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,13,8,8,8,8,13,8,8,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,13,13,4,3,13,13,13,3,13,4,4,13,4,13,3,13,13,3,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,3,3,4,3,13,3,3,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,0,13,3,13,3,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,3,8,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,11,10,11,11,11,11,11,11,11,0,11,11,11,11,0,11,0,11,11,11,11,11,11,8,3,3,4,13,13,13,4,13,13,4,13,13,13,13,13,13,13,13,3,13,4,4,13,13,13,4,13,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,8,8,10,10,10,10,13,3,4,13,13,13,13,13,13,13,13,3,4,4,13,13,13,13,13,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,3,13,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5],"n":["BackEndError","CLIError","ComposerError","Document","Error","FileIOError","Identify","ImplParsingError","InterfaceError","InvalidArgument","InvalidTarget","LibraryError","Logger","Name","NonNegative","NonZeroReal","ParsingError","PathName","Positive","PositiveReal","ProjectError","Result","Reverse","Reversed","UnexpectedDuplicate","UniqueKeyBuilder","UniquelyNamedBuilder","UnknownError","add_item","add_item","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_bits","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cat","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","design","doc","enabled","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","finish","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_str","generator","get","hash","hash","hash","identifier","into","into","into","into","into","into","is_empty","last","len","log","logical","mul","ne","ne","ne","new","new","new","new","parent","parser","partial_cmp","partial_cmp","partial_cmp","physical","push","reverse","reversed","stdlib","this","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","with_item","with_item","with_items","with_items","0","0","0","0","0","0","0","0","0","0","0","ComponentKey","GEN_LIB","IFKey","LibKey","NodeIFHandle","NodeKey","ParamHandle","ParamKey","ParamStoreKey","StreamletHandle","StreamletKey","THIS_KEY","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","iface","implementation","into","into","into","lib","lib","lib","library","ne","ne","ne","node","param","param","project","streamlet","streamlet","streamlet","this","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Backend","Implementation","Structural","as_any_box","as_any_mut","as_any_ref","borrow","borrow_mut","cast_box","cast_mut","cast_ref","composer","eq","fmt","from","gen_dot","into","streamlet_handle","try_from","try_into","type_id","0","0","GenDot","GenHDL","GenericComponent","connect_action","gen_dot","gen_dot","gen_hdl","get_implementation","get_interface","get_interface_mut","impl_backend","impl_graph","inputs","interfaces","interfaces_mut","key","misc","outputs","parser","patterns","streamlet","ImplementationBackend","connect_action","fmt","name","streamlet_handle","Edge","ImplementationGraph","Node","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone_into","clone_into","clone_into","component","edges","eq","eq","fmt","fmt","from","from","from","gen_dot","gen_dot","gen_dot","get_edge","get_node","iface","iface_mut","into","into","into","io","key","ne","nodes","sink","source","streamlet","streamlet_key","this","this","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","COMMENT","ImplDef","ImplParser","LineNum","Rule","WHITESPACE","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","bool","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","chain_connection","char","clone","clone_into","clone_stream","cmp","concat_struct_builder","concat_variant_builder","connect","connection","connection_in_place","demux_concat_variant","demux_packed_variant","desync_struct_builder","eq","equivalent","exp","external","filter_stream","finish","fmt","from","from","from","hash","hdl","ident","implementation","inner","insert_node","int","into","into","into","line_num","map_stream","map_vector","node","node_if_handle","number","packed_variant_builder","parameter_assign","parse","partial_cmp","pattern","reduce_stream","reduce_vector","split_concat_struct","split_desync_struct","streamlet_handle","streamlet_inst","string","structural","structural_body","this","to_owned","transform_body","transform_chain_connection","transform_filter_stream","transform_map_stream","transform_node","transform_pattern","transform_reduce_stream","transform_streamlet_inst","transform_structural","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","unwrap","vector_to_seq","FilterStream","FilterStreamBackend","MapStream","MapStreamBackend","ReduceStream","ReduceStreamBackend","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone_into","clone_into","clone_into","connect_action","connect_action","finish","finish","finish","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","name","name","name","streamlet","streamlet","streamlet","streamlet_handle","streamlet_handle","streamlet_handle","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","with_backend","with_backend","with_backend","Library","add_streamlet","as_any_box","as_any_mut","as_any_ref","borrow","borrow_mut","canonical","cast_box","cast_mut","cast_ref","eq","fancy","fmt","from","from_builder","from_file","gen_dot","get_streamlet","get_streamlet_mut","identifier","into","key","ne","new","streamlets","try_from","try_into","try_new","type_id","NamedParameter","ParameterStore","ParameterVariant","String","Type","UInt","add","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","doc","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_builder","get","identifier","identifier","into","into","into","item","key","key","ne","ne","ne","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","0","0","0","Project","add_lib","add_streamlet_impl","as_any_box","as_any_mut","as_any_ref","borrow","borrow_mut","canonical","cast_box","cast_mut","cast_ref","fancy","from","from_builder","get_lib","get_lib_mut","get_streamlet","get_streamlet_mut","identifier","into","libraries","new","try_from","try_into","type_id","In","Interface","Mode","Out","Streamlet","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","attach_implementation","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canonical","canonical","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone_into","clone_into","clone_into","doc","eq","eq","eq","fancy","fancy","fmt","fmt","fmt","from","from","from","from_builder","from_str","gen_dot","get_implementation","get_interface","get_interface_mut","identifier","identifier","infer_type","interfaces","interfaces_mut","into","into","into","key","key","mode","ne","reverse","reverse","streamlet","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","typ","type_id","type_id","type_id","with_doc","with_doc","with_type_inference","GenerateProject","chisel","common","dot","generate","vhdl","AbstractionLevel","Analyze","Canonical","ChiselBackEnd","ChiselConfig","ChiselIdentifier","ChiselMode","DeclareChisel","DeclareChiselLibrary","DeclareChiselType","Fancy","FieldMode","Forward","In","IsDecoupled","Out","Reverse","abstraction","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","chisel_identifier","chisel_identifier","clap","clap","clone","clone","clone_into","clone_into","config","declare","declare","declare","default","default","default","eq","field_mode","fmt","fmt","fmt","from","from","from","from","from","from_clap","from_clap","from_str","generate","into","into","into","into","is_decupled","list_record_types","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Array","Array","Bit","BitVec","Component","Field","In","Mode","Out","Package","Parameter","Port","Project","Record","Record","Type","TypeBundle","Union","append_name_nested","append_name_nested","array","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","bitvec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","chisel_identifier","chisel_identifier","chisel_identifier","chisel_identifier","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","convert","declare","declare","declare","declare","declare","declare","declare","declare","declare","declare","declare","declare_usings","doc","doc","doc","eq","eq","eq","eq","eq","eq","field_mode","field_mode","fields","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_component","has_reversed","has_reversed","has_reversed","has_reversed_field","identifier","identifier","identifier","identifier","identifier","identifier","identifier","insert","insert_new_field","into","into","into","into","into","into","into","into","into","into","is_decupled","is_decupled","is_empty","is_reversed","libraries","list_nested_types","list_nested_types","list_record_types","list_usings","mode","name","ne","ne","ne","ne","ne","new","new","new","new","new","new_documented","new_empty","new_empty_stream","parameters","ports","record","reversed","reversed","set_doc","set_doc","split","split","split","split","split","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","vhdl_identifier","vhdl_identifier","vhdl_identifier","vhdl_identifier","vhdl_identifier","width","with_doc","with_doc","with_doc","with_throughput","0","0","0","width","BackEndError","CANON_SUFFIX","CLIError","Componentify","ComposerError","Error","FileIOError","ImplParsingError","InterfaceError","InvalidArgument","InvalidTarget","LibraryError","ModeFor","Multilane","Packify","ParsingError","Portify","ProjectError","Projectify","Result","Typify","UnexpectedDuplicate","UnknownError","as_any_box","as_any_mut","as_any_ref","as_fail","borrow","borrow_mut","canonical","canonical","canonical","canonical","canonical","cast_box","cast_mut","cast_ref","clone","clone_into","eq","fancy","fancy","fancy","fancy","fancy","fmt","fmt","from","from","from","from","into","mode_for","ne","to_owned","to_string","try_from","try_into","type_id","with_throughput","0","0","0","0","0","0","0","0","0","0","0","Color","Colors","DotBackend","DotStyle","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cluster","default","default","default","from","from","from","from","generate","into","into","into","into","io","node","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AbstractionLevel","Analyze","Canonical","Declare","DeclareLibrary","DeclareType","DeclareUsings","Fancy","ListUsings","Split","Usings","VHDLBackEnd","VHDLConfig","VHDLIdentifier","abstraction","add_using","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","clap","clap","clone","clone","clone_into","clone_into","combine","config","declare","declare","declare","declare_usings","default","default","default","fmt","fmt","fmt","from","from","from","from","from","from_clap","from_clap","from_str","generate","into","into","into","into","list_nested_types","list_usings","new_empty","split","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","usings","vhdl_identifier","Bits","Desync","Direction","ElementStream","FlatDesync","Flatten","Forward","Group","Group","LogicalSplitItem","LogicalType","Null","PhysicalSplitItem","Reverse","Signals","Signals","Signals","Stream","Stream","Stream","Stream","Sync","Synchronicity","Union","Union","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical","canonical","canonical","canonical","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compatible","data","default","default","dimensionality","direction","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","fancy","fancy","fancy","fancy","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","into","into","into","into","into","into","into","into","into","into","is_element_only","is_null","is_null","is_signals","is_stream","iter","iter","logical_type","logical_type","logical_type","ne","ne","ne","ne","ne","ne","ne","ne","new","new_basic","path_name","physical","reverse","reverse","split","synchronicity","tag","throughput","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new_bits","try_new_group","try_new_union","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","nom","bits","bool","comment","comment_delimited","comment_doc","comment_doc_block","comment_line","complexity","direction","doc","group","interface","list_of_streamlets","logical_stream_type","mode","name","null","stream","streamlet","synchronicity","take_until_newline_or_eof","union","BitCount","Complexity","Fields","Origin","PhysicalStream","Scalar","Signal","SignalList","Sink","Source","Vector","Width","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","bit","bit_count","bit_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complexity","data","data_bit_count","default","dimensionality","element_fields","element_lanes","endi","endi_bit_count","eq","eq","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","identifier","into","into","into","into","into","into","into","iter","keys","last","last_bit_count","level","major","mode_for","ne","ne","ne","ne","ne","new","new","new","new_major","opt_bit_count","opt_vec","origin","partial_cmp","ready","reversed","signal_list","stai","stai_bit_count","strb","strb_bit_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user","user","user_bit_count","valid","values","vec","width","with_name","0","basic","common","utils","stub","Passthrough","PassthroughStubBackend","Sink","SinkStubBackend","Source","SourceStubBackend","Stub","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","clone","clone_into","connect_action","connect_action","connect_action","finish","fmt","from","from","from","from","into","into","into","into","name","name","name","streamlet","streamlet_handle","streamlet_handle","streamlet_handle","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","with_backend","0","0","0","architecture","entity","Architecture","ArchitectureDeclare","add_declaration","add_statement","add_using","as_any_box","as_any_mut","as_any_ref","assignment","borrow","borrow_mut","cast_box","cast_mut","cast_ref","clone","clone_into","declaration","declarations","declare","declare","declare_usings","doc","entity_ports","fmt","from","identifier","impls","into","list_usings","new","new_default","object","set_doc","statement","statements","to_owned","try_from","try_into","type_id","with_doc","Assign","AssignDeclaration","Assignment","AssignmentKind","Bit","BitVec","Direct","DirectAssignment","DontCare","Downto","FieldSelection","FullArray","FullRecord","H","Index","L","Logic","Name","Object","ObjectAssignment","Range","RangeConstraint","StdLogicValue","To","U","Value","ValueAssignment","W","X","Z","array_assignment","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","assign","assign","assign_from","assignment","assignment_from","bitvec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","declare","declare","declare_for","declare_for","declare_usings","declare_usings","declare_usings","doc","downto","downto","eq","equivalent","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_char","from_field","full_record","high","impls","index","into","into","into","into","into","into","into","into","into","is_between","kind","list_usings","list_usings","list_usings","low","name","ne","new","object","object","object_string","overlaps","reverse","set_doc","to","to","to","to_direct","to_downto","to_field","to_index","to_named","to_nested","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_range","to_string","to_string","to_string","to_string","to_to","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","width_u32","with_doc","0","0","0","0","0","0","0","0","end","end","start","start","0","0","0","ArrayAssignment","Direct","Others","Sliced","as_any_box","as_any_mut","as_any_ref","borrow","borrow_mut","cast_box","cast_mut","cast_ref","clone","clone_into","direct","fmt","from","into","others","partial","to_owned","try_from","try_into","type_id","0","0","direct","others","BitVecValue","Full","Others","Signed","Unsigned","as_any_box","as_any_mut","as_any_ref","borrow","borrow_mut","cast_box","cast_mut","cast_ref","clone","clone_into","declare","declare_for","declare_for_range","fmt","from","from_str","into","to_owned","try_from","try_into","type_id","validate_width","0","0","0","0","FlatAssignment","FlatLength","flat_length","flat_length_for","to_complex","to_flat","Alias","AliasDeclaration","ArchitectureDeclaration","Assigned","Component","ComponentPort","Constant","Custom","EntityPort","Function","Object","ObjectDeclaration","ObjectKind","ObjectMode","Out","Procedure","Signal","SubType","Type","Undefined","Variable","architecturedeclaration_from","as_any_box","as_any_box","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","as_any_ref","as_any_ref","assign","assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_box","cast_box","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","component_port","constant","declare","declare","declare","declare_usings","default","entity_port","eq","eq","equivalent","equivalent","field_selection","flat_length","flat_length_for","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_object","from_port","identifier","identifier","impls","into","into","into","into","into","kind","list_usings","mode","new","object","set_default","signal","to_complex","to_flat","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","variable","with_selection","0","0","0","0","0","0","0","0","Array","ArrayObject","Bit","ObjectType","Record","RecordObject","array","array","as_any_box","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_mut","as_any_ref","as_any_ref","as_any_ref","bit_vector","bit_vector","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_assign","can_assign_type","cast_box","cast_box","cast_box","cast_mut","cast_mut","cast_mut","cast_ref","cast_ref","cast_ref","clone","clone","clone","clone_into","clone_into","clone_into","fields","flat_length","flat_length_for","fmt","fmt","fmt","fmt","from","from","from","from","from","get_field","get_field","get_nested","high","into","into","into","is_bitvector","is_flat","is_union","low","new","new_union","object_from","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from_splittable","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_name","type_name","type_name","width","0","0","Assignment","PortMapping","PortMapping","Statement","as_any_box","as_any_box","as_any_mut","as_any_mut","as_any_ref","as_any_ref","borrow","borrow","borrow_mut","borrow_mut","cast_box","cast_box","cast_mut","cast_mut","cast_ref","cast_ref","clone","clone","clone_into","clone_into","component_name","declare","declare","declare","finish","fmt","fmt","from","from","from","from","from_component","into","into","label","map_port","mappings","ports","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","Entity","as_any_box","as_any_mut","as_any_ref","borrow","borrow_mut","cast_box","cast_mut","cast_ref","clone","clone_into","declare","doc","fmt","from","from","identifier","into","new","parameters","ports","set_doc","to_owned","try_from","try_into","type_id","with_doc","fancy_wrapper","generate_fancy_wrapper"],"q":["tyditydi::Error","","","","","","","","","","","tydi::design","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::implementation","","","","","","","","","","","","","","","","","","","","","tydi::design::implementation::Implementation","","tydi::design::implementation::composer","","","","","","","","","","","","","","","","","","","","","tydi::design::implementation::composer::impl_backend","","","","","tydi::design::implementation::composer::impl_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::implementation::composer::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::implementation::composer::patterns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::library","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::param","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::param::ParameterVariant","","","tydi::design::project","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design::streamlet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::generator","","","","","","tydi::generator::chisel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::generator::commontydi::generator::common::Type","","","","tydi::generator::common::convert","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::generator::common::convert::Error","","","","","","","","","","","tydi::generator::dot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::generator::vhdl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::logicaltydi::logical::LogicalSplitItem","","tydi::logical::LogicalType","","","","tydi::logical::PhysicalSplitItem","","tydi::parser","tydi::parser::nom","","","","","","","","","","","","","","","","","","","","","","tydi::physicaltydi::physical::Width","tydi::stdlib","","","tydi::stdlib::basic","tydi::stdlib::basic::stub","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::basic::stub::Stub","","","tydi::stdlib::common","","tydi::stdlib::common::architecture","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::common::architecture::assignmenttydi::stdlib::common::architecture::assignment::AssignmentKind","","tydi::stdlib::common::architecture::assignment::DirectAssignment","","","tydi::stdlib::common::architecture::assignment::FieldSelection","","tydi::stdlib::common::architecture::assignment::RangeConstraint","","","","","tydi::stdlib::common::architecture::assignment::StdLogicValue","tydi::stdlib::common::architecture::assignment::ValueAssignment","","tydi::stdlib::common::architecture::assignment::array_assignment","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::common::architecture::assignment::array_assignment::ArrayAssignment","","","","tydi::stdlib::common::architecture::assignment::bitvec","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::common::architecture::assignment::bitvec::BitVecValue","","","","tydi::stdlib::common::architecture::assignment::flatten","","","","","","tydi::stdlib::common::architecture::declaration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::common::architecture::declaration::ArchitectureDeclaration","","","","","","","","tydi::stdlib::common::architecture::object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::common::architecture::object::ObjectType","","tydi::stdlib::common::architecture::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::common::architecture::statement::Statement","","tydi::stdlib::common::entity","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::stdlib::utils","tydi::stdlib::utils::fancy_wrapper"],"d":["Back-end error.","Generic CLI error.","Composer error","Trait for things that have documentation.","Error variants used in this crate.","File I/O error.","Trait for things that have names.","Parsing error.","Forbidden interface name.","Indicates an invalid argument is provided.","Invalid target.","Library error","Simple logger for Tydi.","Type-safe wrapper for valid names.","Non-negative integer.","","Parsing error.","Type-safe path for names.","Positive integer.","Positive real.","Project error","Result type with <code>Error</code> variants.","In-place reverse.","Construct reversed items.","Indicates an unexpected duplicate is provided.","A builder for lists of things requiring unique names.","A builder for lists of things requiring unique names.","Unknown error.","Add an item to the builder.","Add an item to the builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Concatenate stuff using format with an underscore in …","","","","","","","","","","","","","Constructs that are used to generate hardware designs, …","Return optionally existing user-written documentation of …","","","","","","","","","","Finalize the builder, checking whether all names are …","Finalize the builder, checking whether all names are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if this PathName is empty (∅).","","","","Logical streams.","","","","","Construct a new builder.","Construct a new builder.","","","","Parser methods and implementations for Tydi types.","","","","Physical streams.","","Reverse in-place.","Returns a new reversed instance.","Standard Library of generated components for Tydi types.","Returns the key that signifies the streamlet that is being …","","","","","","","","","","","","","","","","","","","","","","","Constructs a new name wrapper. Returns an error when the …","","","","","","","","Return this builder with the item appended.","Return this builder with the item appended.","Return this builder with the items appended.","Return this builder with the items appended.","","","","","","","","","","","","","","","Index types","","","","","","Handles for objects inside a project, through project …","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","This module contains the Library structure, used to group …","","","","","","","","This module contains the Streamlet structure.","","","Returns the key that signifies the streamlet that is being …","","","","","","","","","","","","","","","","An implementation variant.","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","","","","Returns a reference to the streamlet this implementation …","","","","","","","Traits for components in the implementation graph","","","","","","","","","","","","","","","","","","","","Trait for general implementation backends","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","! FilterStream construct","","! MapStream construct","","! ReduceStream construct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A collection of Streamlets.","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","","Construct a Library from a UniquelyNamedBuilder with …","Construct a Library from a Streamlet Definition File.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A collection of Streamlets.","","Add the implementation of a streamlet to the project.","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","Construct a Project from a UniquelyNamedBuilder with …","","","","","","","","","","","","The interface is an input of the streamlet.","A Streamlet interface.","Streamlet interface mode.","The interface is an output of the streamlet.","Streamlet interface definition.","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","Construct a new streamlet from an interface builder that …","","","","","","","","","Return an iterator over the interfaces of this Streamlet.","Return an iterator over the interfaces of this Streamlet.","","","","","","Return the Mode of the interface.","","","","","","","","","","","","","","Try to construct a new interface.","Return the [LogicalStreamType] of the interface.","","","","","Return this streamlet with documentation added.","","Trait to generate back-end specific source files from the …","Chisel back-end.","Common hardware representation.","","Generate source files from a common::Project and save them …","VHDL back-end.","Abstraction levels","Analyze trait for Chisel objects.","","A configurable VHDL back-end entry point.","VHDL back-end configuration parameters.","Generate trait for Chisel identifiers.","Modes for Chisel elements.","Generate trait for generic Chisel declarations.","Generate trait for Chisel package declarations.","Generate trait for Chisel type declarations.","","Convert field direction to mode","Forward.","Input.","Checks if a record has ready-valid signals, so it could be …","Output.","Reverse.","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Generate a Chisel identifier from self.","","","","","","","","","Generate a Chisel declaration from self.","Generate a Chisel declaration from self.","Generate a Chisel declaration from self.","","","","","Return Mode with related to the default direction, which …","","","","","","","","","","","","","","","","","","List all record types used.","","","","","","","","","","","","","","","Inner struct for <code>Type::Array</code>","An array of any type, used to represent multiple element …","A single bit.","A vector of bits.","A component.","A field for a <code>Record</code>.","Input.","Modes for ports.","Output.","A library of components and types.","A parameter for components.","A port.","A project with libraries","Inner struct for <code>Type::Record</code>","A record.","Hardware types.","Bundle of names and types. Useful to represent flattened …","Unions are implemented as records when using a “fancy” …","Append a string to the name of this record, and any nested …","Append a string to the name of this array, and any nested …","Construct an array type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a bit vector type.","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","The components declared within the library.66","Generator methods and implementations for Tydi types.","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterable over the fields.","Flatten a type to a non-nested type bundle.","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the record contains a field that is …","","Returns true if the port type contains reversed fields.","Returns true if the record contains a field that is …","","","","","","The identifier.","The name of the project.","Add a field to the record.","Create a new field and add it to the record.","","","","","","","","","","","","","Returns true if record contains no fields.","Returns true if this field is reversed.","The libraries contained within the projects.","","","","","Return the port mode.","","","","","","","Construct a new record field.","Construct a new record.","","Create a new port.","Create a new component.","Create a new port with documentation.","Construct a new record without any fields.","Construct a new record with a valid and ready bit.","Return a reference to the parameters of this component.","Return a reference to the ports of this component.","Construct a record type.","","","Set the documentation of this port.","Set the documentation of this component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of this field.","","Return the type of the port.","","","","","","","","","","","","Construct a union type.","","","","","","","Return this field with documentation added.","Return this port with documentation added.","Return this component with documentation added.","","","","","The width of the vector.","Back-end error.","Suffix provided to the canonical representation of …","Generic CLI error.","Trait to create common representation components from …","Composer error","Error variants used in this crate.","File I/O error.","Parsing error.","Forbidden interface name.","Indicates an invalid argument is provided.","Invalid target.","Library error","Trait that helps to determine the common representation …","","Trait to create common representation of a package.","Parsing error.","Trait to create common representation ports from things in …","Project error","Trait to create common representation of a project.","Result type with <code>Error</code> variants.","Trait to create common representation types from things in …","Indicates an unexpected duplicate is provided.","Unknown error.","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","Display the error variants.","","","","","","","Return the port mode of self, given a streamlet interface …","","","","","","","","","","","","","","","","","","","","","A configurable VHDL back-end entry point.","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Abstraction levels","Analyze trait for VHDL objects.","","Generate trait for generic VHDL declarations.","Generate trait for VHDL package declarations.","Generate trait for VHDL type declarations.","","","","Trait used to split types, ports, and record fields into a …","A list of VHDL usings, indexed by library","A configurable VHDL back-end entry point.","VHDL back-end configuration parameters.","Generate trait for VHDL identifiers.","","If the set did not have this value present, <code>true</code> is …","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","Combine two usings","","Generate a VHDL declaration from self.","Generate a VHDL declaration from self.","Generate a VHDL declaration from self.","","","","","","","","","","","","","","","","","","","","","List all nested types used.","","","Split up self into a (downstream/forward, …","","","","","","","","","","","","","","","","Generate a VHDL identifier from self.","The Bits stream type, defined as <code>Bits(b)</code>, indicates the …","Desync may be used if the relation between the elements in …","Direction of a stream.","An element stream with a path name and LogicalType. …","FlatDesync, finally, does the same thing as Desync, but …","Indicating that there is a one-to-one relation between the …","Forward indicates that the child stream flows in the same …","The Group stream type acts as a product type (composition).","The Group stream type acts as a product type (composition).","A split item is either an async signal (outside …","Types of logical streams.","The Null stream type indicates the transferrence of …","A split item is either an async signal (outside …","Reverse indicates that the child stream acts as a response …","","","","The stream-manipulating logical stream type.","The Stream type is used to define a new physical stream.","","","Indicating that there is a one-to-one relation between the …","The synchronicity of the elements in the child stream with …","Reference","The Union stream type acts as a sum type (exclusive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dimensionality of this stream.","Returns the direction of this stream.","","","","","","","","","","","","","","","","","Return all fields in this element stream","Returns all fields in these async signals.","","","","","","","","","","","","","","","","","Wraps this union in a <code>LogicalType</code>.","Wraps this stream in a <code>LogicalType</code>.","Wraps this group in a <code>LogicalType</code>.","","","","","","","","","","","","","","","","","","","Returns true if this logical stream consists of only …","Returns true if this stream is null i.e. it results in no …","Returns true if and only if this logical stream does not …","","","Returns an iterator over the fields of the Group.","Returns an iterator over the fields of the Union.","Returns the LogicalType of this element. Contains no …","Returns the LogicalType of this element.","","","","","","","","","","","","","","Reverse this direction.","Reverse the direction of this stream.","","Returns the synchronicity of this stream.","Returns the tag name and width of this union. Reference","Returns the throughput ratio of this stream.","","","","","","","","","","","","","","","","Returns a new Bits stream type with the provided bit count …","","","","","","","","","","","","","","","","Returns a new Group logical stream type. Returns an error …","Returns a new Union logical stream type. Returns an error …","Returns a new Bits stream type with the provided bit count …","Returns a new Group stream type from the provided iterator …","","","","","","","","","","","","","","","","","","","","Nom-based parsers for Streamlet Definition Files.","","","","Delimited comments, not meant for doc strings, so if it …","Line comment meant for doc strings.","","Line or eof delimited comment, not meant for doc string, …","","","","","","","","","","","","","","","","Positive number of bits.","Interface complexity level.","","","Physical stream.","Non-vectorized single bit.","","Signal list for the signals in a physical stream.","","","Vectorized multiple bits.","","","","","","","","","","","","","","","","","","","","","","","Returns a single bit non-vector style signal.","Returns the combined bit count of all signals in this …","Returns the bit count of all combined signals in this map.","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","A complexity number is higher than another when the …","Returns the complexity of this physical stream.","Returns the <code>data</code> signal, if applicable for this …","Returns the bit count of the data (element) fields in this …","","Returns the dimensionality of this physical stream.","Returns the element fields in this physical stream.","Returns the number of element lanes in this physical …","Returns the <code>endi</code> signal, if applicable for this …","Returns the number of <code>endi</code> (end index) bits in this …","A complexity number is higher than another when the …","","","","","","","","Display a complexity level as a version number. The levels …","","","","","","","","","Convert a NonNegative into complexity with the NonNegative …","","","","","","","","","","","","","","","","","","","","","Returns the <code>last</code> signal, if applicable for this …","Returns the number of last bits in this physical stream. …","Returns the level of this Complexity.","Returns the major version of this Complexity level.","Return the common representation port mode for this signal …","","","","","","Constructs a new Complexity with provided level. Returns …","","Constructs a new PhysicalStream using provided arguments. …","Constructs a new Complexity with provided level as major …","Returns the bit count of all combined signals in this map.","Returns a vector-style signal if the input width is …","","","Returns the ready signal.","Returns whether the signal is reversed w.r.t. the source","Returns the signal list for this physical stream.","Returns the <code>stai</code> signal, if applicable for this …","Returns the number of <code>stai</code> (start index) bits in this …","Returns the <code>strb</code> signal, if applicable for this …","Returns the number of <code>strb</code> (strobe) bits in this physical …","","","","","","","","","Try to convert a vector of NonNegative into a complexity. …","","","","","","","","","","","","","","","","","","","","","","","Returns the user fields in this physical stream.","Returns the <code>user</code> signal, if applicable for this …","Returns the bit count of the user fields in this physical …","Returns the valid signal.","","Returns a vector-style signal.","","","","TODO: This should be extracted into its own crate. Basic …","Common properties","","","","","","","","","Stub construct, this can be used to prototype a dependency …","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An architecture","","","","Add additional usings which weren’t already part of the …","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","","Returns a string for the declaration, pre is useful for …","","","","","","","","","","","Create the architecture based on a component contained …","Create the architecture based on a component contained …","","Set the documentation of this architecture.","","","","","","","Return this architecture with documentation added.","","Describing the declaration of an assignment","An object can be assigned from another object or directly","An object can be assigned a value or from another object","Assigning a value to a single bit","Assigning a value to a (part of) a bit vector","An object is assigned a value, or all fields are …","Directly assigning a value or an entire Record/Array","Don’t care, ‘-’","A range [start] downto [end]","A VHDL assignment constraint","Assigning all fields of an Array","Assigning all fields of a Record","Weak signal (likely ‘1’), ‘H’","An index within a range","Weak signal (likely ‘0’), ‘L’","Logic, ‘0’ or ‘1’","The field of a record","An object is assigned from or driven by another object","An object can be assigned a value or another object","The most common kind of constraint, a specific range or …","A VHDL range constraint","Possible values which can be assigned to std_logic","A range [start] to [end]","Uninitialized, ‘U’","Assigning a specific value to a bit vector or single bit","Directly assigning a value or an entire Record, …","Weak signal (either ‘0’ or ‘1’), ‘W’","Unknown, ‘X’,","High Impedance, ‘Z’","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Select fields from the object being assigned","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","Verifies whether a range constraint is inside of this …","","","","","","","","","","Create a <code>RangeConstraint::DownTo</code> and ensure correctness …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the greatest index within the range constraint","","","","","","","","","","","","Verifies whether this range constraint is between <code>high</code> and …","Returns the assignment kind","","","","Returns the smallest index within the range constraint","","","","","Returns a reference to the object being assigned from","The object declaration with any field selections on it","Verifies whether a range constraint overlaps with this …","Attempts to reverse the assignment. This is (currently) …","Set the documentation of this assignment declaration.","","","Create a <code>RangeConstraint::To</code> and ensure correctness (end &gt; …","Converts an object assignment into a direct assignment. …","Append a downto range field selection","Returns the fields selected","Append a to range field selection","Append a named field selection","","","","","","","","","","","Append a range field selection","","","","","Append a to range field selection","","","","","","","","","","","","","","","","","","","Returns the object type of the selected field","","","","","","","","","","Returns the width of the range","Returns the width of the range","Return this assignment declaration with documentation …","","","","","","","","","","","","","","","","An enum for describing complete assignment to an array","Assigning all of an array directly (may concatenate …","Assigning a single value to all of an array","Assign some fields directly, and may assign all other …","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","A struct for describing value assigned to a bit vector","A full, specific range of std_logic values is assigned","Value assigned as (others =&gt; value)","A value is assigned from a signed integer","A value is assigned from an unsigned integer","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","Declares the value assigned for the object being assigned …","Declares the value assigned for the range being assigned to","","","Create a bit vector value from a string","","","","","","","","","","","This trait enables connecting complex objects and flat …","","Returns the total length of the object when flattened","Returns the total length of a field of the object","Assigns a flat object to a complex object over multiple …","Assigns a complex object to a flat object over multiple …","Alias for an object declaration, with optional range …","Aliases an existing object, with optional field constraint","Architecture declaration.","The object is carrying a value (the “in” port of an …","Component declarations within the architecture","Represents ports on components within the architecture","","","Represents ports declared on the entity this architecture …","","Object declaration, covering signals, variables, constants …","Struct describing the identifier of the object, its type, …","The kind of object declared (signal, variable, constant, …","The state of the object, with respect to the architecture","The object is used to carry a value out of the …","","","","Type declarations within the architecture","The object does not have a defined mode yet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","Entity Ports serve as a way to represent the ports of an …","","","","","Returns the optional field selection of this alias","","","","","","","","","","","","","","","","","","","Returns the alias’s identifier","","","","","","","","","","","Returns the actual object this is aliasing","","","","","","","","","","","","","","","","","","","","","","","Returns the object type of the alias (after fields have …","","","","","","","Apply one or more field selections to the alias","","","","","","","","","An array of fields, covers both conventional arrays, as …","An array object, arrays contain a single type of object, …","A bit object, can not contain further fields","Types of VHDL objects, possibly referring to fields","A record object, consisting of named fields","An record object","Create an array of a specific field type","Create an array of a specific field type","","","","","","","","","","Create a bit vector object","Create a bit vector object","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the object is a Bit or Bit Vector","While Unions are record objects, care needs to be taken to …","","","While Unions are record objects, care needs to be taken to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Entity.","","","","","","Tries to cast self to a boxed dynamic trait object. This …","Tries to cast the self to a different dynamic trait …","Tries to cast self to a different dynamic trait object. …","","","","","","","","","","Create a new entity.","Return a reference to the parameters of this entity.","Return a reference to the ports of this entity.","Set the documentation of this entity.","","","","","Return this entity with documentation added.","",""],"i":[1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,2,3,4,2,3,5,6,7,4,2,3,5,6,7,4,2,3,5,6,7,7,7,4,2,3,5,6,7,4,2,3,5,6,7,4,2,3,5,6,7,4,2,3,5,6,7,4,2,3,5,6,7,0,5,6,7,5,6,7,5,6,7,2,3,6,0,8,4,5,6,6,6,7,5,6,7,2,3,4,2,3,5,6,6,7,7,4,2,3,5,6,7,7,2,3,7,6,0,5,5,6,7,9,4,2,3,5,6,7,7,7,7,4,0,5,5,6,7,2,3,5,7,7,0,5,6,7,0,7,10,11,0,6,5,6,7,6,7,4,2,3,5,6,6,6,6,7,7,7,4,2,3,5,6,7,6,7,4,2,3,5,6,7,2,3,2,3,12,13,14,15,16,17,18,19,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,24,0,23,24,25,23,25,23,0,23,24,25,24,0,25,0,0,23,23,26,23,24,25,23,23,24,24,25,23,24,25,23,24,25,27,0,27,27,27,27,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,28,29,0,0,0,30,31,30,32,30,30,30,0,0,30,30,30,30,0,30,0,0,30,0,33,33,33,33,0,0,0,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,35,36,34,36,34,36,34,35,36,34,35,36,36,36,35,35,34,35,36,35,35,34,36,34,34,36,36,35,36,34,35,36,34,34,35,36,34,35,36,34,35,36,37,0,0,0,0,37,38,37,39,38,37,39,38,37,39,37,38,37,39,38,37,39,37,38,37,39,38,37,39,38,37,39,37,37,37,37,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,38,37,38,37,39,37,37,37,37,37,38,37,38,37,39,40,37,37,37,37,37,37,37,39,37,37,37,37,37,37,37,37,37,37,37,38,37,38,38,38,38,38,38,38,38,38,38,37,39,38,37,39,38,38,37,39,37,37,0,0,0,0,0,0,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,44,45,46,44,45,46,45,46,44,45,46,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,41,42,43,44,45,46,44,45,46,41,42,43,44,45,46,44,45,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,48,48,48,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,50,48,50,49,48,50,49,48,50,49,49,49,50,49,48,50,49,50,50,49,48,50,49,48,50,49,48,50,49,50,48,50,49,51,52,53,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,0,0,55,0,55,56,57,55,56,57,55,56,57,57,55,56,57,55,56,57,56,57,55,56,57,55,56,57,55,56,57,55,56,57,55,56,57,57,55,56,57,56,57,55,56,57,55,56,57,57,55,56,57,57,57,56,57,56,57,57,55,56,57,56,57,56,56,55,56,57,55,56,57,55,56,57,55,56,57,56,56,55,56,57,56,57,56,0,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,59,0,60,60,0,60,60,61,60,59,61,62,60,59,61,62,60,59,61,62,60,59,61,62,60,59,61,62,60,59,61,62,60,59,61,62,60,59,61,62,63,60,59,61,60,59,60,59,62,64,65,66,59,61,62,60,67,60,59,61,60,59,61,62,62,59,61,59,62,60,59,61,62,68,69,60,59,60,59,61,62,60,59,61,62,60,59,61,62,0,70,70,70,0,0,71,0,71,0,0,0,0,0,70,0,0,70,72,73,70,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,70,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,72,70,71,76,74,72,73,70,75,71,76,77,74,72,73,70,75,71,76,77,78,0,72,72,73,70,70,76,76,77,77,78,78,78,74,76,77,74,72,73,70,71,76,74,76,72,70,74,72,73,70,75,71,76,77,78,79,74,72,73,70,70,75,71,71,76,77,78,79,78,72,70,76,72,74,72,73,76,77,78,79,72,72,74,72,73,70,75,71,76,77,78,79,72,70,72,74,79,70,77,77,78,76,75,74,72,73,70,76,74,72,73,76,77,76,72,72,77,77,70,74,71,76,77,74,72,73,70,76,74,72,73,70,75,71,76,77,74,72,73,70,75,71,76,77,78,79,74,72,73,70,75,71,76,77,78,79,74,73,76,75,74,72,73,70,75,71,76,77,78,79,70,72,73,70,71,76,73,74,76,77,70,80,81,82,83,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,84,85,86,87,88,1,1,1,1,1,1,87,88,84,85,86,1,1,1,1,1,1,1,89,1,1,1,1,1,1,90,12,13,14,15,16,17,18,19,20,21,22,0,0,0,0,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,91,92,93,94,93,92,93,94,91,92,93,94,94,91,92,93,94,93,93,91,92,93,94,91,92,93,94,91,92,93,94,0,0,95,0,0,0,0,95,0,0,0,0,0,0,96,97,97,95,96,98,97,95,96,98,97,95,96,98,97,95,96,98,97,95,96,98,97,95,96,98,97,95,96,98,97,95,96,98,95,96,97,95,97,95,97,98,99,100,101,102,95,96,98,97,95,96,97,95,96,98,98,95,96,95,98,97,95,96,98,103,104,97,105,97,95,97,95,96,98,97,95,96,98,97,95,96,98,97,106,107,108,0,0,108,108,109,0,107,0,0,107,0,109,0,110,111,0,107,110,111,108,0,0,107,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,112,113,114,107,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,107,112,109,108,112,112,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,115,116,110,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,107,107,107,107,115,116,110,111,109,108,109,108,112,113,114,107,115,116,110,111,107,112,107,110,110,113,114,115,116,110,112,113,114,107,115,116,110,111,112,112,115,107,109,112,107,112,114,112,109,108,112,113,114,107,115,116,110,111,109,108,112,113,114,107,107,115,116,110,111,109,108,112,113,114,107,115,116,110,111,113,114,107,107,107,109,108,112,113,114,107,115,116,110,111,117,118,119,120,121,122,123,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,0,0,126,126,125,0,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,130,129,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,128,129,126,125,130,131,127,129,131,129,127,129,129,129,131,129,127,128,129,126,125,130,131,127,127,127,128,129,126,125,130,131,127,127,128,129,129,126,125,130,131,131,131,127,130,127,128,129,126,125,130,131,128,128,131,129,127,127,126,128,129,125,130,131,127,128,129,127,131,130,130,127,131,130,129,131,129,131,129,127,128,129,126,125,130,131,127,127,127,128,129,126,125,130,131,127,128,129,126,125,130,131,129,127,128,129,126,125,130,131,129,131,129,131,128,130,130,130,132,0,0,0,0,133,0,133,0,133,0,0,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,133,133,134,135,136,133,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,134,135,136,133,133,134,135,136,133,133,137,138,139,0,0,0,0,140,140,140,140,140,140,0,140,140,140,140,140,140,140,0,140,141,140,140,140,140,140,140,140,0,140,140,140,140,0,140,0,140,140,140,140,140,140,0,0,0,0,142,142,143,0,144,145,0,146,146,144,145,144,144,147,143,0,147,0,0,145,144,146,0,144,144,144,0,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,0,151,150,148,0,0,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,145,0,148,149,143,148,149,143,148,147,145,144,144,0,148,149,143,150,150,144,144,146,142,147,147,145,145,148,149,149,143,143,143,143,150,150,144,146,146,146,142,142,142,147,145,144,150,143,145,0,147,148,149,143,150,144,146,142,147,145,145,149,148,149,143,145,147,144,148,148,150,148,145,148,148,149,147,145,143,149,149,149,149,149,148,149,143,150,144,146,142,147,145,149,150,144,147,145,149,148,149,143,150,144,146,142,147,145,148,149,143,150,144,146,142,147,145,150,148,149,143,150,144,146,142,147,145,145,145,148,152,153,154,155,156,157,158,159,160,161,160,161,162,163,164,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,166,167,168,168,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,170,171,172,173,0,0,174,174,175,175,176,0,0,177,176,178,178,176,178,176,176,0,0,0,177,176,178,176,176,177,178,0,176,178,177,179,180,176,178,177,179,180,176,178,177,179,180,179,180,176,178,177,179,180,176,178,177,179,180,176,178,177,179,180,176,178,177,179,180,176,178,177,179,180,176,178,177,179,180,176,178,177,179,180,179,179,0,176,179,179,179,179,178,177,178,177,180,179,179,176,178,178,177,179,180,176,176,176,178,177,179,180,180,179,179,180,0,176,178,177,179,180,179,179,179,180,180,179,179,179,179,176,178,177,179,180,178,176,178,177,179,180,176,178,177,179,180,180,179,180,176,178,177,179,180,179,180,181,182,183,184,185,186,187,188,189,0,189,0,189,0,189,190,189,191,190,189,191,190,189,191,190,189,190,189,191,190,189,191,190,189,189,189,191,190,189,191,190,189,191,190,189,191,190,189,191,190,191,189,189,189,189,191,190,189,189,189,191,190,189,191,189,190,189,191,190,190,189,191,190,191,191,0,189,191,190,189,189,189,191,191,190,190,189,189,191,190,190,189,191,190,189,191,190,190,192,193,194,0,194,0,194,195,194,195,194,195,194,195,194,195,194,195,194,195,194,195,194,195,194,195,195,0,194,195,195,194,195,194,194,194,195,195,194,195,195,195,195,195,194,195,194,195,194,195,194,195,196,197,0,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["bitslice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,[[],["nonzeroreal",3]],[[],["name",3]],[[],["pathname",3]],[[]],[[]],[[]],[[["nonzeroreal",3]],["ordering",4]],[[["name",3]],["ordering",4]],[[["pathname",3]],["ordering",4]],[[]],[[]],[[],["str",15]],null,[[],["option",4,[["string",3]]]],[[["metadata",3]],["bool",15]],[[["nonzeroreal",3]],["bool",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["name",3]],["bool",15]],[[["pathname",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",6,[["vec",3]]]],[[],["result",6,[["vec",3]]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["name",3]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],["result",6]],null,[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4,[["name",3]]]],[[],["usize",15]],[[["record",3]]],null,[[["nonzeroreal",3]]],[[["nonzeroreal",3]],["bool",15]],[[["name",3]],["bool",15]],[[["pathname",3]],["bool",15]],[[]],[[]],[[],["result",6]],[[]],[[],["option",4,[["pathname",3]]]],null,[[["nonzeroreal",3]],["option",4,[["ordering",4]]]],[[["name",3]],["option",4,[["ordering",4]]]],[[["pathname",3]],["option",4,[["ordering",4]]]],null,[[]],[[]],[[]],null,[[],["nodekey",6]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],["result",6]],[[["str",15]],["result",6]],[[["pair",3,[["rule",4]]]],["result",6]],[[],["result",4]],[[["string",3]],["result",6]],[[["str",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["streamlethandle",3]],[[],["nodeifhandle",3]],[[],["paramhandle",3]],[[]],[[]],[[]],[[["streamlethandle",3]],["bool",15]],[[["nodeifhandle",3]],["bool",15]],[[["paramhandle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["nodekey",6]],null,[[]],[[]],[[]],[[],["libkey",6]],[[],["libkey",6]],null,null,[[["streamlethandle",3]],["bool",15]],[[["nodeifhandle",3]],["bool",15]],[[["paramhandle",3]],["bool",15]],[[],["nodekey",6]],null,[[],["paramkey",6]],null,null,[[],["streamletkey",6]],null,[[],["nodekey",6]],[[]],[[]],[[]],[[["pair",3,[["rule",4]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[["pair",3,[["rule",4]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],null,[[["implementation",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[]],[[],["streamlethandle",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["result",6]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[],["result",6,[["string",3]]]],[[],["option",4,[["rc",3,[["implementation",4]]]]]],[[["ifkey",6]],["result",6,[["ref",3,[["interface",3]]]]]],[[["ifkey",6]],["result",6,[["refmut",3,[["interface",3]]]]]],null,null,[[],["box",3,[["iterator",8]]]],[[],["box",3,[["iterator",8]]]],[[],["box",3,[["iterator",8]]]],[[],["componentkey",6]],null,[[],["box",3,[["iterator",8]]]],null,null,[[],["streamlet",3]],null,[[],["result",6]],[[["formatter",3]],["result",6]],[[],["name",3]],[[],["streamlethandle",3]],null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["edge",3]],[[],["node",3]],[[],["implementationgraph",3]],[[]],[[]],[[]],[[],["rc",3,[["genericcomponent",8]]]],[[]],[[["edge",3]],["bool",15]],[[["implementationgraph",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[["nodeifhandle",3]],["result",6,[["edge",3]]]],[[["nodekey",6]],["result",6,[["node",3]]]],[[["ifkey",6]],["result",6,[["ref",3,[["interface",3]]]]]],[[["ifkey",6]],["result",6,[["refmut",3,[["interface",3]]]]]],[[]],[[]],[[]],[[],["result",6,[["nodeifhandle",3]]]],[[],["nodekey",6]],[[["edge",3]],["bool",15]],[[]],[[],["nodeifhandle",3]],[[],["nodeifhandle",3]],[[],["streamlethandle",3]],[[],["streamletkey",6]],[[],["nodekey",6]],[[],["node",3]],[[]],[[]],[[]],[[],["result",4]],[[["pair",3,[["rule",4]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,null,[[],["rule",4]],[[]],null,[[["rule",4]],["ordering",4]],null,null,[[["edge",3]],["result",6]],null,null,null,null,null,[[["rule",4]],["bool",15]],[[],["bool",15]],null,null,null,[[],["implementation",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,[[["node",3]],["result",6]],null,[[]],[[]],[[]],[[],["usize",15]],null,null,null,null,null,null,null,[[["rule",4],["str",15]],["result",4,[["pairs",3,[["rule",4]]],["error",3,[["rule",4]]]]]],[[["rule",4]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,null,null,null,[[],["node",3]],[[]],[[],["result",6]],[[["pair",3,[["rule",4]]]],["result",6]],[[["pair",3,[["rule",4]]],["name",3]],["result",6]],[[["pair",3,[["rule",4]]],["name",3]],["result",6]],[[["pair",3,[["rule",4]]]],["result",6]],[[["pair",3,[["rule",4]]],["name",3]],["result",6]],[[["pair",3,[["rule",4]]],["name",3]],["result",6]],[[["pair",3,[["rule",4]]],["name",3]],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["project",3],["str",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["mapstream",3]],[[],["reducestream",3]],[[],["filterstream",3]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["mapstream",3]],[[],["reducestream",3]],[[],["filterstream",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["name",3]],[[],["name",3]],[[],["name",3]],[[],["streamlet",3]],[[],["streamlet",3]],[[],["streamlet",3]],[[],["streamlethandle",3]],[[],["streamlethandle",3]],[[],["streamlethandle",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["project",3],["name",3],["streamlethandle",3]],["result",6]],[[["project",3],["name",3],["streamlethandle",3]],["result",6]],[[["project",3],["name",3]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["name",3],["streamlethandle",3]],["result",6]],[[["name",3],["streamlethandle",3]],["result",6]],[[["name",3],["streamlethandle",3]],["result",6]],null,[[["streamlet",3]],["result",6,[["streamlethandle",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["package",3]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[["library",3]],["bool",15]],[[],["package",3]],[[["formatter",3]],["result",6]],[[]],[[["libkey",6],["uniquekeybuilder",3,[["parameterstore",3]]],["uniquekeybuilder",3,[["streamlet",3]]]],["result",6]],[[["path",3]],["result",6]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[["streamletkey",6]],["result",6,[["streamlet",3]]]],[[["streamletkey",6]],["result",6,[["streamlet",3]]]],[[],["str",15]],[[]],[[],["libkey",6]],[[["library",3]],["bool",15]],[[],["library",3]],[[]],[[],["result",4]],[[],["result",4]],[[["libkey",6],["vec",3,[["parameterstore",3]]],["vec",3,[["streamlet",3]]]],["result",6]],[[],["typeid",3]],null,null,null,null,null,null,[[["namedparameter",3]],["result",6,[["paramhandle",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4,[["string",3]]]],[[["parametervariant",4]],["bool",15]],[[["namedparameter",3]],["bool",15]],[[["parameterstore",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["paramstorekey",6],["uniquekeybuilder",3,[["namedparameter",3]]]],["result",6]],[[["paramkey",6]],["result",6,[["namedparameter",3]]]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[],["parametervariant",4]],[[],["paramkey",6]],[[],["paramstorekey",6]],[[["parametervariant",4]],["bool",15]],[[["namedparameter",3]],["bool",15]],[[["parameterstore",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["parametervariant",4],["option",4,[["str",15]]]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["library",3]],["result",6,[["libkey",6]]]],[[["streamlethandle",3],["implementation",4]],["result",6]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["project",3]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["project",3]],[[]],[[["name",3],["uniquelynamedbuilder",3,[["library",3]]]],["result",6]],[[["libkey",6]],["result",6,[["library",3]]]],[[["libkey",6]],["result",6,[["library",3]]]],[[["streamlethandle",3]],["result",6,[["streamlet",3]]]],[[["streamlethandle",3]],["result",6,[["streamlet",3]]]],[[],["str",15]],[[]],[[]],[[["name",3]],["project",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["implementation",4]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["port",3]]]],[[["option",4,[["str",15]]]],["component",3]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["mode",4]],[[],["interface",3]],[[],["streamlet",3]],[[]],[[]],[[]],[[],["option",4,[["string",3]]]],[[["mode",4]],["bool",15]],[[["interface",3]],["bool",15]],[[["streamlet",3]],["bool",15]],[[],["vec",3,[["port",3]]]],[[["option",4,[["str",15]]]],["option",4,[["component",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["name",3],["uniquekeybuilder",3,[["interface",3]]],["option",4,[["str",15]]]],["result",6]],[[["str",15]],["result",6]],[[["dotstyle",3],["project",3],["usize",15],["str",15],["str",15]],["string",3]],[[],["option",4,[["rc",3,[["implementation",4]]]]]],[[["ifkey",6]],["result",6,[["ref",3,[["interface",3]]]]]],[[["ifkey",6]],["result",6,[["refmut",3,[["interface",3]]]]]],[[],["str",15]],[[],["str",15]],[[["logicaltype",4]],["result",6]],[[],["box",3,[["iterator",8]]]],[[],["box",3,[["iterator",8]]]],[[]],[[]],[[]],[[],["ifkey",6]],[[],["componentkey",6]],[[],["mode",4]],[[["interface",3]],["bool",15]],[[]],[[]],[[],["streamlet",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["mode",4],["option",4,[["str",15]]]],["result",6]],[[],["logicaltype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,[[["project",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["abstractionlevel",4]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["app",3]],[[],["app",3]],[[],["chiselmode",4]],[[],["abstractionlevel",4]],[[]],[[]],[[],["chiselconfig",3]],[[],["result",6,[["string",3]]]],[[["bool",15]],["result",6,[["string",3]]]],[[["abstractionlevel",4]],["result",6,[["string",3]]]],[[]],[[]],[[],["chiselbackend",3]],[[["chiselmode",4]],["bool",15]],[[],["result",6,[["chiselmode",4]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["chiselconfig",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["str",15]],["result",6]],[[["project",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["vec",3,[["type",4]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["type",4],["u32",15]],["type",4]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["nonnegative",6]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["field",3]],[[],["record",3]],[[],["array",3]],[[],["type",4]],[[],["parameter",3]],[[],["mode",4]],[[],["port",3]],[[],["component",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["bool",15]],["result",6,[["string",3]]]],[[["bool",15]],["result",6,[["string",3]]]],[[["bool",15]],["result",6,[["string",3]]]],[[["bool",15]],["result",6,[["string",3]]]],[[["bool",15]],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",4,[["string",3],["error",4]]]],[[],["option",4,[["string",3]]]],[[],["option",4,[["string",3]]]],[[],["option",4,[["string",3]]]],[[["field",3]],["bool",15]],[[["record",3]],["bool",15]],[[["array",3]],["bool",15]],[[["type",4]],["bool",15]],[[["mode",4]],["bool",15]],[[["port",3]],["bool",15]],[[],["result",6,[["chiselmode",4]]]],[[],["result",6,[["chiselmode",4]]]],[[]],[[["vec",3,[["string",3]]],["bool",15]],["typebundle",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["width",4]]],[[]],[[]],[[["mode",4]]],[[]],[[]],[[]],[[]],[[],["result",6,[["component",3]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,[[["field",3]]],[[["type",4],["bool",15],["option",4,[["string",3]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["vec",3,[["type",4]]]],[[],["vec",3,[["type",4]]]],[[],["vec",3,[["type",4]]]],[[],["result",6,[["usings",3]]]],[[],["mode",4]],null,[[["field",3]],["bool",15]],[[["record",3]],["bool",15]],[[["array",3]],["bool",15]],[[["type",4]],["bool",15]],[[["port",3]],["bool",15]],[[["type",4],["bool",15],["option",4,[["string",3]]]],["field",3]],[[["vec",3,[["field",3]]]],["record",3]],[[["type",4],["nonnegative",6]],["array",3]],[[["mode",4],["type",4]],["port",3]],[[["vec",3,[["parameter",3]]],["vec",3,[["port",3]]],["option",4,[["string",3]]]],["component",3]],[[["mode",4],["type",4],["option",4,[["string",3]]]],["port",3]],[[],["record",3]],[[],["record",3]],[[],["vec",3]],[[],["vec",3]],[[["vec",3,[["field",3]]]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec",3,[["field",3]]]],["type",4]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["nonnegative",6]],[[]],[[]],[[]],[[["nonzeroreal",3,[["f64",15]]]],["result",6,[["type",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["fail",8]],[[]],[[]],[[],["vec",3,[["signal",3]]]],[[],["vec",3,[["port",3]]]],[[["option",4,[["str",15]]]],["component",3]],[[],["package",3]],[[],["project",3]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["error",4]],[[]],[[["error",4]],["bool",15]],[[],["package",3]],[[],["project",3]],[[],["option",4,[["type",4]]]],[[],["vec",3,[["port",3]]]],[[["option",4,[["str",15]]]],["option",4,[["component",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[["box",3,[["error",8]]]]],[[]],[[["setloggererror",3]]],[[]],[[["mode",4]],["mode",4]],[[["error",4]],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["nonzeroreal",3,[["f64",15]]]],["result",6,[["type",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15],["usize",15]],["string",3]],[[]],[[]],[[],["dotbackend",3]],[[]],[[]],[[]],[[]],[[["project",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15],["mode",4]],["string",3]],[[["usize",15]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["abstractionlevel",4]],[[["name",3]],["bool",15]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["app",3]],[[],["app",3]],[[],["usings",3]],[[],["abstractionlevel",4]],[[]],[[]],[[["usings",3]]],[[],["vhdlconfig",3]],[[],["result",6,[["string",3]]]],[[["bool",15]],["result",6,[["string",3]]]],[[["abstractionlevel",4]],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[]],[[]],[[],["vhdlbackend",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["vhdlconfig",3]]],[[]],[[["argmatches",3]]],[[["argmatches",3]]],[[["str",15]],["result",6]],[[["project",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["vec",3,[["type",4]]]],[[],["result",6,[["usings",3]]]],[[],["usings",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["indexmap",3]],[[],["result",6,[["string",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["signal",3]]]],[[],["vec",3,[["signal",3]]]],[[],["vec",3,[["signal",3]]]],[[],["vec",3,[["signal",3]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["direction",4]],[[],["synchronicity",4]],[[],["stream",3]],[[],["group",3]],[[],["union",3]],[[],["logicaltype",4]],[[],["elementstream",3]],[[],["signals",3]],[[],["logicalsplititem",4]],[[],["physicalsplititem",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["logicaltype",4]],["bool",15]],[[],["logicaltype",4]],[[]],[[]],[[],["nonnegative",6]],[[],["direction",4]],[[["direction",4]],["bool",15]],[[["synchronicity",4]],["bool",15]],[[["stream",3]],["bool",15]],[[["group",3]],["bool",15]],[[["union",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["elementstream",3]],["bool",15]],[[["signals",3]],["bool",15]],[[["logicalsplititem",4]],["bool",15]],[[["physicalsplititem",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4,[["type",4]]]],[[],["option",4,[["type",4]]]],[[],["option",4,[["type",4]]]],[[],["option",4,[["type",4]]]],[[],["fields",3]],[[],["fields",3]],[[],["fields",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["union",3]]],[[["stream",3]]],[[["group",3]]],[[]],[[["positive",6]]],[[]],[[]],[[]],[[]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["logicaltype",4]],[[],["logicaltype",4]],[[],["logicaltype",4]],[[["stream",3]],["bool",15]],[[["group",3]],["bool",15]],[[["union",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["elementstream",3]],["bool",15]],[[["signals",3]],["bool",15]],[[["logicalsplititem",4]],["bool",15]],[[["physicalsplititem",4]],["bool",15]],[[["logicaltype",4],["positivereal",6],["nonnegative",6],["synchronicity",4],["direction",4],["option",4,[["logicaltype",4]]],["bool",15]]],[[["logicaltype",4]]],[[]],[[],["intoiter",3,[["physicalsplititem",4]]]],[[]],[[]],[[],["intoiter",3,[["logicalsplititem",4]]]],[[],["synchronicity",4]],[[],["option",4]],[[],["positivereal",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["nonnegative",6]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[["nonnegative",6]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["str",15]],["iresult",6,[["str",15],["logicaltype",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["bool",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["str",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["str",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["str",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["str",15]]],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["str",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["complexity",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["direction",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["option",4,[["string",3]]],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["logicaltype",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["interface",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["vec",3,[["streamlet",3]]],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["logicaltype",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["mode",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["name",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["logicaltype",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["logicaltype",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["streamlet",3],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["synchronicity",4],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["str",15],["verboseerror",3,[["str",15]]]]]],[[["str",15]],["iresult",6,[["str",15],["logicaltype",4],["verboseerror",3,[["str",15]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["origin",4]],["signal",3]],[[],["nonnegative",6]],[[],["nonnegative",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["complexity",3]],[[],["fields",3]],[[],["physicalstream",3]],[[],["origin",4]],[[],["width",4]],[[],["signal",3]],[[],["signallist",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complexity",3]],["ordering",4]],[[],["complexity",3]],[[],["option",4,[["signal",3]]]],[[],["nonnegative",6]],[[]],[[],["nonnegative",6]],[[],["fields",3]],[[],["positive",6]],[[],["option",4,[["signal",3]]]],[[],["nonnegative",6]],[[],["bool",15]],[[["fields",3]],["bool",15]],[[["physicalstream",3]],["bool",15]],[[["origin",4]],["bool",15]],[[["width",4]],["bool",15]],[[["signal",3]],["bool",15]],[[["signallist",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["nonnegative",6]]],[[]],[[["elementstream",3]],["physicalstream",3]],[[]],[[]],[[]],[[]],[[["physicalstream",3]],["signallist",3]],[[["physicalstream",3]],["signallist",3]],[[]],[[["str",15]],["result",6]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["signal",3]]]],[[],["nonnegative",6]],[[]],[[],["nonnegative",6]],[[["mode",4]],["mode",4]],[[["fields",3]],["bool",15]],[[["physicalstream",3]],["bool",15]],[[["width",4]],["bool",15]],[[["signal",3]],["bool",15]],[[["signallist",3]],["bool",15]],[[],["result",6]],[[],["result",6]],[[["positive",6],["nonnegative",6]]],[[["nonnegative",6]]],[[],["option",4,[["nonnegative",6]]]],[[["origin",4],["option",4,[["nonnegative",6]]]],["option",4,[["signal",3]]]],[[],["origin",4]],[[["complexity",3]],["option",4,[["ordering",4]]]],[[],["signal",3]],[[],["bool",15]],[[],["signallist",3]],[[],["option",4,[["signal",3]]]],[[],["nonnegative",6]],[[],["option",4,[["signal",3]]]],[[],["nonnegative",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["vec",3,[["nonnegative",6]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["fields",3]],[[],["option",4,[["signal",3]]]],[[],["nonnegative",6]],[[],["signal",3]],[[]],[[["origin",4],["positive",6]],["signal",3]],[[],["width",4]],[[["string",3]],["signal",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["stub",4]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["stub",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["name",3]],[[],["name",3]],[[],["name",3]],[[],["streamlet",3]],[[],["streamlethandle",3]],[[],["streamlethandle",3]],[[],["streamlethandle",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["project",3],["name",3],["streamlethandle",3]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["name",3],["streamlethandle",3]],["result",6]],null,null,null,null,null,null,null,[[],["result",6]],[[],["result",6]],[[["name",3],["string",3]],["bool",15]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["architecture",3]],[[]],null,[[],["vec",3]],[[["str",15],["str",15]],["result",6,[["string",3]]]],[[],["result",6,[["string",3]]]],[[],["result",4,[["string",3],["error",4]]]],[[],["option",4,[["string",3]]]],[[],["result",6,[["indexmap",3,[["string",3],["objectdeclaration",3]]]]]],[[["formatter",3]],["result",6]],[[]],[[],["str",15]],null,[[]],[[],["result",6,[["usings",3]]]],[[["name",3],["name",3],["package",3]],["result",6,[["architecture",3]]]],[[["package",3]],["result",6,[["architecture",3]]]],null,[[]],null,[[],["vec",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[],["result",6,[["assigndeclaration",3]]]],[[["vec",3]],["result",6]],[[],["assignment",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["assigndeclaration",3]],[[],["assignment",3]],[[],["assignmentkind",4]],[[],["objectassignment",3]],[[],["stdlogicvalue",4]],[[],["directassignment",4]],[[],["valueassignment",4]],[[],["fieldselection",4]],[[],["rangeconstraint",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rangeconstraint",4]],["bool",15]],null,[[["str",15],["str",15]],["result",6,[["string",3]]]],[[["string",3],["str",15],["str",15]],["result",6,[["string",3]]]],[[["str",15],["str",15]],["result",6,[["string",3]]]],[[],["result",4,[["string",3],["error",4]]]],[[],["result",4,[["string",3],["error",4]]]],[[],["result",4,[["string",3],["error",4]]]],[[],["option",4,[["string",3]]]],[[],["result",6,[["fieldselection",4]]]],[[["i32",15],["i32",15]],["result",6,[["rangeconstraint",4]]]],[[["stdlogicvalue",4]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["objectdeclaration",3]]],[[["objectassignment",3]]],[[]],[[]],[[]],[[]],[[["arrayassignment",4]]],[[]],[[]],[[]],[[["bitvecvalue",4]]],[[["stdlogicvalue",4]]],[[]],[[]],[[["char",15]],["result",6,[["stdlogicvalue",4]]]],[[],["vec",3]],[[["indexmap",3,[["string",3],["assignmentkind",4]]]],["assignmentkind",4]],[[],["i32",15]],null,[[],["fieldselection",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["i32",15]],["result",6,[["bool",15]]]],[[],["assignmentkind",4]],[[],["result",6,[["usings",3]]]],[[],["result",6,[["usings",3]]]],[[],["result",6,[["usings",3]]]],[[],["i32",15]],[[],["fieldselection",4]],[[["stdlogicvalue",4]],["bool",15]],[[["objectdeclaration",3],["assignment",3]],["assigndeclaration",3]],[[],["objectdeclaration",3]],[[],["objectdeclaration",3]],[[],["string",3]],[[["rangeconstraint",4]],["bool",15]],[[],["result",6,[["assigndeclaration",3]]]],[[]],[[["fieldselection",4]]],[[],["result",6,[["fieldselection",4]]]],[[["i32",15],["i32",15]],["result",6,[["rangeconstraint",4]]]],[[["bool",15]],["result",6,[["assignmentkind",4]]]],[[["i32",15],["i32",15]],["result",6]],[[],["vec",3]],[[["i32",15]]],[[["str",15]]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rangeconstraint",4]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["i32",15],["i32",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6,[["objecttype",4]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["width",4]],[[],["u32",15]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["arrayassignment",4]],[[]],[[["vec",3,[["assignmentkind",4]]]],["arrayassignment",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[["assignmentkind",4]],["arrayassignment",4]],[[["indexmap",3,[["rangeconstraint",4],["assignmentkind",4]]],["option",4,[["assignmentkind",4]]]],["arrayassignment",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["bitvecvalue",4]],[[]],[[],["result",6,[["string",3]]]],[[],["string",3]],[[["rangeconstraint",4]],["result",6,[["string",3]]]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],["result",6,[["bitvecvalue",4]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u32",15]],["result",6]],null,null,null,null,null,null,[[],["result",6,[["u32",15]]]],[[["vec",3]],["result",6,[["u32",15]]]],[[["objectdeclaration",3],["vec",3],["vec",3]],["result",6,[["vec",3,[["assigndeclaration",3]]]]]],[[["objectdeclaration",3],["vec",3],["vec",3]],["result",6,[["vec",3,[["assigndeclaration",3]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["result",6,[["assigndeclaration",3]]]],[[],["result",4,[["assigndeclaration",3],["error",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["architecturedeclaration",4]],[[],["objectkind",4]],[[],["objectmode",4]],[[],["objectdeclaration",3]],[[],["aliasdeclaration",3]],[[]],[[]],[[]],[[]],[[]],[[["objecttype",4],["mode",4]],["objectdeclaration",3]],[[["objecttype",4]],["objectdeclaration",3]],null,[[["str",15],["str",15]],["result",6,[["string",3]]]],[[["str",15],["str",15]],["result",6,[["string",3]]]],[[],["result",4,[["string",3],["error",4]]]],[[],["option",4]],[[["objecttype",4],["mode",4]],["objectdeclaration",3]],[[["objectkind",4]],["bool",15]],[[["objectmode",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["vec",3]],[[],["result",6,[["u32",15]]]],[[["vec",3]],["result",6,[["u32",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["aliasdeclaration",3]]],[[]],[[["objectdeclaration",3]]],[[]],[[]],[[]],[[]],[[["objectdeclaration",3]],["aliasdeclaration",3]],[[["port",3],["bool",15]],["result",6,[["vec",3,[["objectdeclaration",3]]]]]],[[],["str",15]],[[],["str",15]],null,[[]],[[]],[[]],[[]],[[]],[[],["objectkind",4]],[[],["result",6,[["usings",3]]]],[[],["objectmode",4]],[[["objectdeclaration",3],["vec",3,[["fieldselection",4]]]],["result",6,[["aliasdeclaration",3]]]],[[],["objectdeclaration",3]],[[["assignmentkind",4]],["result",6]],[[["objecttype",4],["option",4,[["assignmentkind",4]]]],["objectdeclaration",3]],[[["objectdeclaration",3],["vec",3],["vec",3]],["result",6,[["vec",3,[["assigndeclaration",3]]]]]],[[["objectdeclaration",3],["vec",3],["vec",3]],["result",6,[["vec",3,[["assigndeclaration",3]]]]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6,[["objectdeclaration",3]]]],[[],["objecttype",4]],[[],["result",6,[["objecttype",4]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["objecttype",4],["option",4,[["assignmentkind",4]]]],["objectdeclaration",3]],[[["vec",3,[["fieldselection",4]]]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15],["i32",15],["objecttype",4]],["result",6,[["objecttype",4]]]],[[["i32",15],["i32",15],["objecttype",4]],["result",6,[["arrayobject",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["i32",15],["i32",15]],["result",6,[["objecttype",4]]]],[[["i32",15],["i32",15]],["result",6,[["arrayobject",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["assignment",3]],["result",6]],[[["objecttype",4]],["result",6]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["objecttype",4]],[[],["recordobject",3]],[[],["arrayobject",3]],[[]],[[]],[[]],[[],["indexmap",3]],[[],["result",6,[["u32",15]]]],[[["vec",3]],["result",6,[["u32",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["recordobject",3]]],[[["arrayobject",3]]],[[]],[[]],[[["fieldselection",4]],["result",6,[["objecttype",4]]]],[[],["result",6,[["objecttype",4]]]],[[["vec",3]],["result",6,[["objecttype",4]]]],[[],["i32",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["i32",15]],[[["indexmap",3,[["string",3],["objecttype",4]]]],["recordobject",3]],[[["indexmap",3,[["string",3],["objecttype",4]]]],["recordobject",3]],null,[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[["type",4]],["result",6]],[[],["result",4]],[[["record",3]],["result",6]],[[],["result",4]],[[["array",3]],["result",6]],[[["type",4]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["objecttype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["u32",15]],null,null,null,null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["statement",4]],[[],["portmapping",3]],[[]],[[]],[[],["str",15]],null,[[["str",15],["str",15]],["result",6,[["string",3]]]],[[["str",15],["str",15]],["result",6,[["string",3]]]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["assigndeclaration",3]]],[[["portmapping",3]]],[[]],[[]],[[["component",3]],["result",6,[["portmapping",3]]]],[[]],[[]],[[],["str",15]],[[],["result",6]],[[],["hashmap",3]],[[],["indexmap",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[["box",3,[["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["any",8],["global",3]]]]]],[[],["option",4]],[[],["option",4]],[[],["entity",3]],[[]],[[],["result",6,[["string",3]]]],[[],["option",4,[["string",3]]]],[[["formatter",3]],["result",6]],[[]],[[["component",3]]],[[],["str",15]],[[]],[[["vec",3,[["parameter",3]]],["vec",3,[["port",3]]],["option",4,[["string",3]]]],["entity",3]],[[],["vec",3]],[[],["vec",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["package",3],["streamletkey",6]],["result",6,[["architecture",3]]]]],"p":[[4,"Error"],[3,"UniqueKeyBuilder"],[3,"UniquelyNamedBuilder"],[3,"Logger"],[3,"NonZeroReal"],[3,"Name"],[3,"PathName"],[8,"Document"],[8,"Identify"],[8,"Reverse"],[8,"Reversed"],[13,"CLIError"],[13,"InvalidArgument"],[13,"FileIOError"],[13,"ParsingError"],[13,"ImplParsingError"],[13,"InvalidTarget"],[13,"BackEndError"],[13,"InterfaceError"],[13,"ProjectError"],[13,"ComposerError"],[13,"LibraryError"],[3,"StreamletHandle"],[3,"NodeIFHandle"],[3,"ParamHandle"],[6,"NodeKey"],[4,"Implementation"],[13,"Structural"],[13,"Backend"],[8,"GenericComponent"],[8,"GenDot"],[8,"GenHDL"],[8,"ImplementationBackend"],[3,"Edge"],[3,"Node"],[3,"ImplementationGraph"],[4,"Rule"],[3,"ImplParser"],[3,"ImplDef"],[8,"LineNum"],[3,"MapStreamBackend"],[3,"ReduceStreamBackend"],[3,"FilterStreamBackend"],[3,"MapStream"],[3,"ReduceStream"],[3,"FilterStream"],[3,"Library"],[4,"ParameterVariant"],[3,"ParameterStore"],[3,"NamedParameter"],[13,"Type"],[13,"String"],[13,"UInt"],[3,"Project"],[4,"Mode"],[3,"Interface"],[3,"Streamlet"],[8,"GenerateProject"],[4,"AbstractionLevel"],[4,"ChiselMode"],[3,"ChiselConfig"],[3,"ChiselBackEnd"],[8,"ChiselIdentifier"],[8,"DeclareChisel"],[8,"DeclareChiselType"],[8,"DeclareChiselLibrary"],[8,"FieldMode"],[8,"IsDecoupled"],[8,"Analyze"],[4,"Type"],[4,"Mode"],[3,"Record"],[3,"Array"],[3,"Field"],[3,"Parameter"],[3,"Port"],[3,"Component"],[3,"Package"],[3,"Project"],[13,"Record"],[13,"Union"],[13,"Array"],[13,"BitVec"],[8,"Typify"],[8,"Portify"],[8,"Componentify"],[8,"Packify"],[8,"Projectify"],[8,"ModeFor"],[8,"Multilane"],[3,"Color"],[3,"Colors"],[3,"DotStyle"],[3,"DotBackend"],[4,"AbstractionLevel"],[3,"VHDLConfig"],[3,"Usings"],[3,"VHDLBackEnd"],[8,"Declare"],[8,"DeclareType"],[8,"DeclareLibrary"],[8,"DeclareUsings"],[8,"Analyze"],[8,"ListUsings"],[8,"Split"],[8,"VHDLIdentifier"],[4,"LogicalType"],[4,"Synchronicity"],[4,"Direction"],[4,"LogicalSplitItem"],[4,"PhysicalSplitItem"],[3,"Stream"],[3,"Group"],[3,"Union"],[3,"ElementStream"],[3,"Signals"],[13,"Signals"],[13,"Stream"],[13,"Bits"],[13,"Group"],[13,"Union"],[13,"Stream"],[13,"Signals"],[13,"Stream"],[4,"Width"],[4,"Origin"],[3,"Complexity"],[3,"Fields"],[3,"PhysicalStream"],[3,"Signal"],[3,"SignalList"],[13,"Vector"],[4,"Stub"],[3,"SourceStubBackend"],[3,"SinkStubBackend"],[3,"PassthroughStubBackend"],[13,"Source"],[13,"Sink"],[13,"Passthrough"],[3,"Architecture"],[8,"ArchitectureDeclare"],[4,"ValueAssignment"],[4,"AssignmentKind"],[4,"StdLogicValue"],[4,"RangeConstraint"],[4,"DirectAssignment"],[4,"FieldSelection"],[3,"AssignDeclaration"],[3,"Assignment"],[3,"ObjectAssignment"],[8,"Assign"],[13,"Object"],[13,"Direct"],[13,"Value"],[13,"FullRecord"],[13,"FullArray"],[13,"Range"],[13,"Name"],[13,"Index"],[13,"To"],[13,"Downto"],[13,"Logic"],[13,"Bit"],[13,"BitVec"],[4,"ArrayAssignment"],[13,"Direct"],[13,"Others"],[13,"Sliced"],[4,"BitVecValue"],[13,"Others"],[13,"Full"],[13,"Unsigned"],[13,"Signed"],[8,"FlatLength"],[8,"FlatAssignment"],[4,"ArchitectureDeclaration"],[4,"ObjectMode"],[4,"ObjectKind"],[3,"ObjectDeclaration"],[3,"AliasDeclaration"],[13,"Type"],[13,"SubType"],[13,"Procedure"],[13,"Function"],[13,"Object"],[13,"Alias"],[13,"Component"],[13,"Custom"],[4,"ObjectType"],[3,"ArrayObject"],[3,"RecordObject"],[13,"Array"],[13,"Record"],[4,"Statement"],[3,"PortMapping"],[13,"Assignment"],[13,"PortMapping"],[3,"Entity"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};